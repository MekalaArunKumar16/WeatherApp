{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akhsj\\\\OneDrive\\\\Desktop\\\\New folder\\\\weather-app\\\\src\\\\components\\\\Weather.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'your_api_key'; // Replace 'your_api_key' with your actual Tomorrow.io API key\n\nfunction Weather() {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        const response = await axios.get('https://api.tomorrow.io/v4/weather/realtime?location=toronto&apikey=2aj7QwO7BAn76KjXQ6V8Ww5QMcPefSJU', {\n          params: {\n            location: 'London',\n            // Change location as needed\n            fields: 'temperature,weatherCode',\n            // Specify the fields you want to fetch\n            units: 'metric',\n            // Use metric units for temperature\n            apiKey: API_KEY\n          }\n        });\n        setWeatherData(response.data.data);\n        console.log(setWeatherData);\n        setLoading(false);\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n    fetchWeatherData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 21\n  }, this);\n  if (!weatherData) return null;\n  const {\n    temperature,\n    weatherCode\n  } = weatherData.timelines[0].intervals[0].values;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Current Weather in London\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperature: \", temperature, \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Weather Code: \", weatherCode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(Weather, \"5D/vak42bx6E1PZA6agARYhQL9Q=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_KEY","Weather","_s","weatherData","setWeatherData","loading","setLoading","error","setError","fetchWeatherData","response","get","params","location","fields","units","apiKey","data","console","log","message","children","fileName","_jsxFileName","lineNumber","columnNumber","temperature","weatherCode","timelines","intervals","values","_c","$RefreshReg$"],"sources":["C:/Users/akhsj/OneDrive/Desktop/New folder/weather-app/src/components/Weather.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = 'your_api_key'; // Replace 'your_api_key' with your actual Tomorrow.io API key\r\n\r\nfunction Weather() {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchWeatherData = async () => {\r\n      try {\r\n        const response = await axios.get('https://api.tomorrow.io/v4/weather/realtime?location=toronto&apikey=2aj7QwO7BAn76KjXQ6V8Ww5QMcPefSJU', {\r\n          params: {\r\n            location: 'London', // Change location as needed\r\n            fields: 'temperature,weatherCode', // Specify the fields you want to fetch\r\n            units: 'metric', // Use metric units for temperature\r\n            apiKey: API_KEY,\r\n          },\r\n        });\r\n        setWeatherData(response.data.data);\r\n        console.log(setWeatherData)\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(error.message);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchWeatherData();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n  if (!weatherData) return null;\r\n\r\n  const { temperature, weatherCode } = weatherData.timelines[0].intervals[0].values;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Current Weather in London</h2>\r\n      <p>Temperature: {temperature}Â°C</p>\r\n      <p>Weather Code: {weatherCode}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAG,cAAc,CAAC,CAAC;;AAEhC,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMa,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,sGAAsG,EAAE;UACvIC,MAAM,EAAE;YACNC,QAAQ,EAAE,QAAQ;YAAE;YACpBC,MAAM,EAAE,yBAAyB;YAAE;YACnCC,KAAK,EAAE,QAAQ;YAAE;YACjBC,MAAM,EAAEhB;UACV;QACF,CAAC,CAAC;QACFI,cAAc,CAACM,QAAQ,CAACO,IAAI,CAACA,IAAI,CAAC;QAClCC,OAAO,CAACC,GAAG,CAACf,cAAc,CAAC;QAC3BE,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACa,OAAO,CAAC;QACvBd,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE,oBAAON,OAAA;IAAAsB,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACzC,IAAIlB,KAAK,EAAE,oBAAOR,OAAA;IAAAsB,QAAA,GAAK,SAAO,EAACd,KAAK;EAAA;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAC3C,IAAI,CAACtB,WAAW,EAAE,OAAO,IAAI;EAE7B,MAAM;IAAEuB,WAAW;IAAEC;EAAY,CAAC,GAAGxB,WAAW,CAACyB,SAAS,CAAC,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC,CAACC,MAAM;EAEjF,oBACE/B,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClC1B,OAAA;MAAAsB,QAAA,GAAG,eAAa,EAACK,WAAW,EAAC,OAAE;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACnC1B,OAAA;MAAAsB,QAAA,GAAG,gBAAc,EAACM,WAAW;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEV;AAACvB,EAAA,CAzCQD,OAAO;AAAA8B,EAAA,GAAP9B,OAAO;AA2ChB,eAAeA,OAAO;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}